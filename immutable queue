package jp.co.worksap.global;
import java.util.*;

	public class ImmutableQueue<E> {
	/**
	* requires default constructor.
	*/
		Queue <E> t;
	public ImmutableQueue() {
	// modify this constructor if necessary, but do not remove default constructor
	   t=new LinkedList<E>();
		
	}
	// add other constructors if necessary
	/**
	* Returns the queue that adds an item into the tail of this queue without modifying this queue.
	* <pre>
	* e.g.
	* When this queue represents the queue (2, 1, 2, 2, 6) and we enqueue the value 4 into this queue,
	* this method returns a new queue (2, 1, 2, 2, 6, 4)
	* and this object still represents the queue (2, 1, 2, 2, 6) .
	* </pre>
	* If the element e is null, throws IllegalArgumentException.
	* @param e
	* @return
	* @throws IllegalArgumentException
	*/
	public ImmutableQueue<E> enqueue(E e) throws IllegalArgumentException {
		if (e==null)
		{
			throw new  IllegalArgumentException();
		}
		Queue<E> j=this.t;
		j.add(e);
		
		this.t=j;
		
	return this;
	}
	/**
	* Returns the queue that removes the object at the head of this queue without modifying this queue.
	* <pre>
	* e.g.
	* When this queue represents the queue (7, 1, 3, 3, 5, 1) ,
	* this method returns a new queue (1, 3, 3, 5, 1)
	* and this object still represents the queue (7, 1, 3, 3, 5, 1) .
	* </pre>
	* If this queue is empty, throws java.util.NoSuchElementException.
	* @return
	* @throws java.util.NoSuchElementException
	*/
	public ImmutableQueue<E> dequeue() throws java.util.NoSuchElementException {
		if(this.t.isEmpty())
		{
			throw new java.util.NoSuchElementException();
		}
		
		Iterator <E>itr=this.t.iterator();
		itr.next();
		Queue<E> tmp = new LinkedList<E>();
		while(itr.hasNext())
		{
			tmp.add(itr.next());
		}
		
		this.t=tmp;
	return this;
	}
	/**
	* Looks at the object which is the head of this queue without removing it from the queue.
	* <pre>
	* e.g.
	* When this queue represents the queue (7, 1, 3, 3, 5, 1),
	* this method returns 7 and this object still represents the queue (7, 1, 3, 3, 5, 1)
	* </pre>
	* If the queue is empty, throws java.util.NoSuchElementException.
	* @return
	* @throws java.util.NoSuchElementException
	*/
	public E peek() throws java.util.NoSuchElementException{
		if(this.t.isEmpty())
		{
			throw new java.util.NoSuchElementException();
		}
		return this.t.peek();
	
	}
	/**
	* Returns the number of objects in this queue.
	* @return
	*/
	public int size() {
		
	return this.t.size();
	}
	}
  class test{
	  public static void main(String args[])
	  {
		  ImmutableQueue<Integer>im=new ImmutableQueue<>();
		  ImmutableQueue<Integer>im1=new ImmutableQueue<>();
		 im= im.enqueue(1000);
		 im1=im.enqueue(5);
		 im1= im1.enqueue(6);
		  im1=im1.enqueue(7);
		  im1=im1.enqueue(8);
		  
		  im1=im1.enqueue(9);
		  System.out.println(im.peek());
		  
		  
		  
		 System.out.println(im1.peek());
		im1= im1.enqueue(1);
		System.out.println(im1.peek());
		 
		  
		  
	  }
	  
  }

